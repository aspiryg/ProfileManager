@page "/ScoringManagement"
@using PM_Models.SEA
@using PM_Server.Business.Repositories.IRepo
@using PM_Server.Components.ConfigurationCom.Com

@inject IJSRuntime _jsRuntime
@inject IScoreRepo _ScoringRepo
@inject NavigationManager _nav
@inject AuthenticationStateProvider _Auth
@inject NotificationService _Notify
@inject IDialogService DialogService

@inject HttpClient httpClient


<PageTitle>Scoring Management</PageTitle>


<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Scoring Management</MudText>
    </MudCardHeader>
    <MudDivider />
    <MudCardContent>
        @foreach (var item in Questions)
        {
            <MudCard Outlined="true">
@*                 <MudCardHeader>
                    <MudGrid Justify="Justify.SpaceBetween" Class="align-center">
                        <MudItem xs="9" sm="9" md="9" lg="9">
                            <MudText Typo="Typo.h6">@item.Question</MudText>
                        </MudItem>
                        <MudItem xs="1" sm="1" md="1" lg="1">
                            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick='() => OpenDialogAsync(item.Question)' />
                        </MudItem>
                    </MudGrid>
                </MudCardHeader> *@
                <MudCardContent>
                    <MudTable T="ScoringSystemDTO" Striped="true" Hover="true" Dense="true" Items="@Scores.Where(x=>x.Question == item.Question)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">@item.Question</MudText>
                            <MudSpacer />
                            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick='() => OpenDialogAsync(item.Question, item.QuestionId)' />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Question</MudTh>
                            <MudTh>Operator</MudTh>
                            <MudTh>Answer</MudTh>
                            <MudTh>Score</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Question">@context.Question</MudTd>
                            <MudTd DataLabel="Operator">@context.Oprator</MudTd>
                            <MudTd DataLabel="Answer">@context.Answer</MudTd>
                            <MudTd DataLabel="Score">@context.Score</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick='() => DeleteScore(context.Id)' />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        }
    </MudCardContent>
</MudCard>

@code {

    private string searchString1 = "";

    public IEnumerable<ScoringSystemDTO> Scores = new List<ScoringSystemDTO>();
    public ScoringSystemDTO Score = new ScoringSystemDTO();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await LoadScores();
        }
    }


    // Load the Scoring System
    public async Task LoadScores()
    {
        StateHasChanged();
        Scores = await _ScoringRepo.GetScores();
        StateHasChanged();
    }


    //initiate a new set of question class

    public class ScoringQuestion
    {
        public int Id { get; set; }
        public int QuestionId { get; set; }
        public string Question { get; set; }
        public string Answer { get; set; }
        public int Score { get; set; }
        public string Oprator { get; set; }
    }

    //initiate the list of ScoringSystemDTO with some default values
    public List<ScoringQuestion> Questions { get; set; }

    public ScoringManagement()
    {
        Questions = new List<ScoringQuestion>
        {
            new ScoringQuestion { Id = 1, QuestionId = 1, Question = "Employment Status"},
            new ScoringQuestion { Id = 2, QuestionId = 2, Question = "Employment Type"},
            new ScoringQuestion { Id = 3, QuestionId = 3, Question = "Number of working family members"},
            new ScoringQuestion { Id = 4, QuestionId = 4, Question = "Education Level"},
            new ScoringQuestion { Id = 5, QuestionId = 5, Question = "Monthly Income"},
            new ScoringQuestion { Id = 6, QuestionId = 6, Question = "Ability to afford essential needs for the next month"},
            new ScoringQuestion { Id = 7, QuestionId = 7, Question = "Number Of Family Members"},
            new ScoringQuestion { Id = 8, QuestionId = 8, Question = "Number of Children"},
            new ScoringQuestion { Id = 9, QuestionId = 9, Question = "Number Of Dependents"},
            new ScoringQuestion { Id = 10, QuestionId = 10, Question = "The applicant the head of the household"},
            new ScoringQuestion { Id = 11, QuestionId = 11, Question = "The applicant has disability"},
            new ScoringQuestion { Id = 12, QuestionId = 12, Question = "Housing Status"},
            new ScoringQuestion { Id = 13, QuestionId = 13, Question = "Housing Type"},
            new ScoringQuestion { Id = 14, QuestionId = 14, Question = "The applicant has health insurance"},
            new ScoringQuestion { Id = 15, QuestionId = 15, Question = "Insurance Type"}
        };
    }


    // Save the Scoring System
    private async Task Save()
    {
        await _ScoringRepo.CreateScore(Score);
        _Notify.Notify(NotificationSeverity.Success, "Success", "Scoring System Saved Successfully");
        _nav.NavigateTo("/ScoringManagement");
    }



    // Open the Dialog
    private async Task OpenDialogAsync(string ques, int quesId)
    {
        var caseCount = Scores.Where(x => x.Question == ques).Count() + 1;
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters<AddScore>
        {
            { X => X.questionPassed, ques },
            { X => X.questionId, quesId },
            { X => X.caseCount, caseCount }
        };

        var dialog = await DialogService.ShowAsync<AddScore>("Simple Dialog", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadScores();
        }
    }

    // Delete the Scoring System through the MudBlazor Dialog
    private async Task DeleteScore(int id)
    {
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var parameters = new DialogParameters<DeleteDialog>
        {
            { X => X.ContentText, "Are you sure you want to delete this Scoring System? This process cannot be undone." },
            { X => X.ButtonText, "Delete" },
            { X => X.Color, Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete Scoring Algorithm",parameters ,options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await _ScoringRepo.DeleteScore(id);
            _Notify.Notify(NotificationSeverity.Success, "Success", "Scoring Algorithm Deleted Successfully");
            await LoadScores();
        }
    }

}
