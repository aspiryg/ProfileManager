// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PM_Server.Data;

#nullable disable

namespace PM_Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240723011841_CreateStage")]
    partial class CreateStage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PM_DataAccess.PatientClasses.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferrerID")
                        .HasColumnType("int");

                    b.Property<int?>("SocialWorkerID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("ReferrerID");

                    b.HasIndex("SocialWorkerID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PM_DataAccess.Referrer.NGOClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NGOs");
                });

            modelBuilder.Entity("PM_DataAccess.StagesClasses.Stage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ActualAssignee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageGroupParent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StageIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("PM_DataAccess.StagesClasses.StageStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("StageStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Color = "Warning",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2107),
                            Description = "",
                            Icon = "Pending",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2104),
                            Status = "Pending"
                        },
                        new
                        {
                            ID = 2,
                            Color = "Primary",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2114),
                            Description = "",
                            Icon = "InProgress",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2113),
                            Status = "In Progress"
                        },
                        new
                        {
                            ID = 3,
                            Color = "Success",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2119),
                            Description = "",
                            Icon = "Completed",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2118),
                            Status = "Completed"
                        },
                        new
                        {
                            ID = 4,
                            Color = "Danger",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2124),
                            Description = "",
                            Icon = "Cancelled",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2122),
                            Status = "Cancelled"
                        },
                        new
                        {
                            ID = 5,
                            Color = "Danger",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2129),
                            Description = "",
                            Icon = "Rejected",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2127),
                            Status = "Rejected"
                        },
                        new
                        {
                            ID = 6,
                            Color = "Success",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2134),
                            Description = "",
                            Icon = "Approved",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2132),
                            Status = "Approved"
                        },
                        new
                        {
                            ID = 7,
                            Color = "Warning",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2139),
                            Description = "",
                            Icon = "OnHold",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2137),
                            Status = "On Hold"
                        },
                        new
                        {
                            ID = 8,
                            Color = "Warning",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2144),
                            Description = "",
                            Icon = "NotStarted",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2142),
                            Status = "Not Started"
                        },
                        new
                        {
                            ID = 9,
                            Color = "Warning",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2149),
                            Description = "",
                            Icon = "NotApplicable",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2147),
                            Status = "Not Applicable"
                        },
                        new
                        {
                            ID = 10,
                            Color = "Warning",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2154),
                            Description = "",
                            Icon = "NotRequired",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2152),
                            Status = "Not Required"
                        },
                        new
                        {
                            ID = 11,
                            Color = "Warning",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2158),
                            Description = "",
                            Icon = "NotAvailable",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(2157),
                            Status = "Not Available"
                        });
                });

            modelBuilder.Entity("PM_DataAccess.UserProfiles.UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserProfiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserProfile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PM_DataAccess.UserProfiles.UserType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1846),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1842),
                            Type = "Referrer"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1853),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1851),
                            Type = "Social Worker"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1859),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1857),
                            Type = "Medical Examiner"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1864),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1862),
                            Type = "HealthCare Service Providers"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1869),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1867),
                            Type = "Financial Supporter"
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1873),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1872),
                            Type = "Medical Missions"
                        },
                        new
                        {
                            ID = 7,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1878),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1876),
                            Type = "Medi-financial service provider"
                        },
                        new
                        {
                            ID = 8,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1883),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 7, 22, 21, 18, 40, 798, DateTimeKind.Local).AddTicks(1881),
                            Type = "Admin"
                        });
                });

            modelBuilder.Entity("PM_Server.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PM_DataAccess.Referrer.Referrer", b =>
                {
                    b.HasBaseType("PM_DataAccess.UserProfiles.UserProfile");

                    b.HasDiscriminator().HasValue("Referrer");
                });

            modelBuilder.Entity("PM_DataAccess.SocialWorker.SocialWorker", b =>
                {
                    b.HasBaseType("PM_DataAccess.UserProfiles.UserProfile");

                    b.HasDiscriminator().HasValue("SocialWorker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PM_Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PM_Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PM_Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PM_Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PM_DataAccess.PatientClasses.Patient", b =>
                {
                    b.HasOne("PM_DataAccess.Referrer.Referrer", null)
                        .WithMany("Patients")
                        .HasForeignKey("ReferrerID");

                    b.HasOne("PM_DataAccess.SocialWorker.SocialWorker", null)
                        .WithMany("Patients")
                        .HasForeignKey("SocialWorkerID");
                });

            modelBuilder.Entity("PM_DataAccess.Referrer.Referrer", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PM_DataAccess.SocialWorker.SocialWorker", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
